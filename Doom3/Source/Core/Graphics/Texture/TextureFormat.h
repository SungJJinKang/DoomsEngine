#pragma once
#include "../../API/OpenglAPI.h"

namespace dooms
{
	namespace graphics
	{
		enum class D_ENUM eTextureComponentFormat : UINT32
		{
			NONE = 0,
			RED = GL_RED,
			RG = GL_RG,
			RGB = GL_RGB,
			BGR = GL_BGR,
			RGBA = GL_RGBA,
			BGRA = GL_BGRA,
			RED_INTEGER = GL_RED_INTEGER,
			RG_INTEGER = GL_RG_INTEGER,
			RGB_INTEGER = GL_RGB_INTEGER,
			BGR_INTEGER = GL_BGR_INTEGER,
			RGBA_INTEGER = GL_RGBA_INTEGER,
			BGRA_INTEGER = GL_BGRA_INTEGER,
			STENCIL_INDEX = GL_STENCIL_INDEX,
			DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
			DEPTH_STENCIL = GL_DEPTH_STENCIL
		};

		enum class D_ENUM eTextureInternalFormat : UINT32
		{
			NONE = 0,
			DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
			DEPTH_COMPONENT16 = GL_DEPTH_COMPONENT16,
			DEPTH_COMPONENT24 = GL_DEPTH_COMPONENT24,
			DEPTH_COMPONENT32 = GL_DEPTH_COMPONENT32,
			DEPTH_COMPONENT32F = GL_DEPTH_COMPONENT32F,
			DEPTH_STENCIL = GL_DEPTH_STENCIL,
			DEPTH24_STENCIL8 = GL_DEPTH24_STENCIL8,
			DEPTH32F_STENCIL8 = GL_DEPTH32F_STENCIL8,
			STENCIL_INDEX = GL_STENCIL_INDEX,
			STENCIL_INDEX8 = GL_STENCIL_INDEX8,
			RED = GL_RED,
			RG = GL_RG,
			RGB = GL_RGB,
			RGBA = GL_RGBA,
			R8 = GL_R8,
			R8_SNORM = GL_R8_SNORM,
			R16 = GL_R16,
			R16_SNORM = GL_R16_SNORM,
			RG8 = GL_RG8,
			RG8_SNORM = GL_RG8_SNORM,
			RG16 = GL_RG16,
			RG16_SNORM = GL_RG16_SNORM,
			R3_G3_B2 = GL_R3_G3_B2,
			RGB4 = GL_RGB4,
			RGB5 = GL_RGB5,
			RGB8 = GL_RGB8,
			RGB8_SNORM = GL_RGB8_SNORM,
			RGB10 = GL_RGB10,
			RGB12 = GL_RGB12,
			RGB16_SNORM = GL_RGB16_SNORM,
			RGBA2 = GL_RGBA2,
			RGBA4 = GL_RGBA4,
			RGB5_A1 = GL_RGB5_A1,
			RGBA8 = GL_RGBA8,
			RGBA8_SNORM = GL_RGBA8_SNORM,
			RGB10_A2 = GL_RGB10_A2,
			RGB10_A2UI = GL_RGB10_A2UI,
			RGBA12 = GL_RGBA12,
			RGBA16 = GL_RGBA16,
			SRGB8 = GL_SRGB8,
			SRGB8_ALPHA8 = GL_SRGB8_ALPHA8,
			R16F = GL_R16F,
			RG16F = GL_RG16F,
			RGB16F = GL_RGB16F,
			RGBA16F = GL_RGBA16F,
			R32F = GL_R32F,
			RG32F = GL_RG32F,
			RGB32F = GL_RGB32F,
			RGBA32F = GL_RGBA32F,
			R11F_G11F_B10F = GL_R11F_G11F_B10F,
			RGB9_E5 = GL_RGB9_E5,
			R8I = GL_R8I,
			R8UI = GL_R8UI,
			R16I = GL_R16I,
			R16UI = GL_R16UI,
			R32I = GL_R32I,
			R32UI = GL_R32UI,
			RG8I = GL_RG8I,
			RG8UI = GL_RG8UI,
			RG16I = GL_RG16I,
			RG16UI = GL_RG16UI,
			RG32I = GL_RG32I,
			RG32UI = GL_RG32UI,
			RGB8I = GL_RGB8I,
			RGB8UI = GL_RGB8UI,
			RGB16I = GL_RGB16I,
			RGB16UI = GL_RGB16UI,
			RGB32I = GL_RGB32I,
			RGB32UI = GL_RGB32UI,
			RGBA8I = GL_RGBA8I,
			RGBA8UI = GL_RGBA8UI,
			RGBA16I = GL_RGBA16I,
			RGBA16UI = GL_RGBA16UI,
			RGBA32I = GL_RGBA32I,
			RGBA32UI = GL_RGBA32UI,
			COMPRESSED_RED = GL_COMPRESSED_RED,
			COMPRESSED_RG = GL_COMPRESSED_RG,
			COMPRESSED_RGB = GL_COMPRESSED_RGB,
			COMPRESSED_RGBA = GL_COMPRESSED_RGBA,
			COMPRESSED_SRGB = GL_COMPRESSED_SRGB,
			COMPRESSED_SRGB_ALPHA = GL_COMPRESSED_SRGB_ALPHA,
			COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1,
			COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1,
			COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2,
			COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2,
			COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM,
			COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM,
			COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT,
			COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,

		};

#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB

#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
		
// 		https://en.wikipedia.org/wiki/S3_Texture_Compression#BC6H_and_BC7
//		https://github.com/BinomialLLC/basis_universal/wiki/OpenGL-texture-format-enums-table
// 		DXT1	BC1	1 - bit Alpha / Opaque	Yes	6:1 (for 24 - bit source image)	Simple non - alpha
// 		DXT2	BC2	Explicit alpha	Yes	4 : 1	Sharp alpha
// 		DXT3	BC2	Explicit alpha	No	4 : 1	Sharp alpha
// 		DXT4	BC3	Interpolated alpha	Yes	4 : 1	Gradient alpha
// 		DXT5	BC3
//		N / A	BC4	Interpolated greyscale	N / A	2:1	Gradient
//		N / A	BC5	Interpolated two - channel	N / A	2 : 1	Gradient

// 		transcoder_texture_format	GL internal format	GL base internal format
// 	!!cTFBC1_RGB	GL_COMPRESSED_RGB_S3TC_DXT1_EXT	GL_RGB
// 	!!cTFBC3_RGBA	GL_COMPRESSED_RGBA_S3TC_DXT5_EXT	GL_RGBA
// 	!!cTFBC4_R	GL_COMPRESSED_RED_RGTC1_EXT	GL_RED
// 	!!cTFBC5_RG	GL_COMPRESSED_RED_GREEN_RGTC2_EXT	GL_RG
// 		cTFETC1_RGB	GL_ETC1_RGB8_OES	GL_RGB
// 		cTFETC2_RGBA	GL_COMPRESSED_RGBA8_ETC2_EAC	GL_RGBA
// 		cTFBC7_M6_RGB, cTFBC7_M5_RGBA	GL_COMPRESSED_RGBA_BPTC_UNORM	GL_RGBA
// 		cTFPVRTC1_4_RGB	GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG	GL_RGB
// 		cTFPVRTC1_4_RGBA	GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG	GL_RGBA
// 		cTFASTC_4x4_RGBA	GL_COMPRESSED_RGBA_ASTC_4x4_KHR	GL_RGBA
// 		cTFATC_RGB	GL_ATC_RGB_AMD	GL_RGB
// 		cTFATC_RGBA	GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD	GL_RGBA
// 		cTFETC2_EAC_R11	GL_COMPRESSED_R11_EAC	GL_RED
// 		cTFETC2_EAC_RG11	GL_COMPRESSED_RG11_EAC	GL_RG
// 		cTFFXT1_RGB	GL_COMPRESSED_RGB_FXT1_3DFX	GL_RGB
// 		cTFPVRTC2_4_RGB, cTFPVRTC2_4_RGBA	GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG	GL_RGBA

		enum class D_ENUM eTextureCompressedInternalFormat : UINT32
		{
			NONE = 0,
			COMPRESSED_RGB8_ETC2 = GL_COMPRESSED_RGB8_ETC2,
			COMPRESSED_SRGB8_ETC2 = GL_COMPRESSED_SRGB8_ETC2,
			COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
			COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
			COMPRESSED_RGBA8_ETC2_EAC = GL_COMPRESSED_RGBA8_ETC2_EAC,
			COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,
			COMPRESSED_R11_EAC = GL_COMPRESSED_R11_EAC,
			COMPRESSED_SIGNED_R11_EAC = GL_COMPRESSED_SIGNED_R11_EAC,
			COMPRESSED_RG11_EAC = GL_COMPRESSED_RG11_EAC,
			COMPRESSED_SIGNED_RG11_EAC = GL_COMPRESSED_SIGNED_RG11_EAC,
			COMPRESSED_RGB_S3TC_DXT1_EXT = GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
			COMPRESSED_RGBA_S3TC_DXT1_EXT = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
			COMPRESSED_RGBA_S3TC_DXT3_EXT = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
			COMPRESSED_RGBA_S3TC_DXT5_EXT = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT,
			COMPRESSED_RED_GREEN_RGTC2_EXT = GL_COMPRESSED_RED_GREEN_RGTC2_EXT,
			COMPRESSED_RED_RGTC1_EXT = GL_COMPRESSED_RED_RGTC1_EXT,
			COMPRESSED_SRGB_S3TC_DXT1_EXT = GL_COMPRESSED_SRGB_S3TC_DXT1_EXT,
			COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,
			COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,
			COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT

		};

	}
}